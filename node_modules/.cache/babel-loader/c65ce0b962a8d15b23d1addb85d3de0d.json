{"ast":null,"code":"var _jsxFileName = \"/Users/kevinli/Desktop/reactut2/src/components/counter.jsx\";\nimport React, { Component } from \"react\";\n\nclass Counter extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      value: this.props.value,\n      //this works because we have defined counter and\n      //its values (props), int he counters.jsx\n      //count2: 0,\n      tags: [\"tag1\", \"tag2\", \"tag3\"] // imageUrl: \"https://picsum.photos/200\"\n\n    };\n    this.styles = {\n      fontSize: 50,\n      fontWeight: \"bold\"\n    };\n\n    this.handleIncrement = product => {\n      //this.props.value =0; this does not work because props is read only\n      //this.state.count += 1; THIS DOESN'T WORK IN REACT\n      //must use method we inherit from component\n      this.setState({\n        value: this.state.value + 1\n      });\n    };\n  }\n\n  //this is called when an object counter is created\n  // {this.state.tags.length === 0 && \"Please create a new tag\"}, in js, boolean and string gives second operand if it is not empty, etc how many operand you want\n  render() {\n    console.log(this.props);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, this.state.tags.length === 0 && \"Please create a new tag\", React.createElement(\"span\", {\n      className: this.getBadgeClasses(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, this.formatCount()), React.createElement(\"button\", {\n      //here, handleIncrement is a function reference, not a function()\n      onClick: () => this.handleIncrement() //see how this is not a \"method per say\", since its an arrow function\n      //doesnt not allow me to pass product atm\n      ,\n      className: \"btn btn-secondary btn-sm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, \"Increment\"), React.createElement(\"button\", {\n      className: \"btn btn-danger btn-sm m-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, \"Delete\"));\n  } //can use this to bind, or just use an arrow function instead\n  //constructor() {\n  //  super();\n  //  this.handleIncrement = this.handleIncrement.bind(this);\n  //}\n\n\n  getBadgeClasses() {\n    let classes = \"badge m-2 badge-\"; //notice how here we're not using const, coz we want to mod it\n\n    classes += this.state.value === 0 ? \"warning\" : \"primary\";\n    return classes;\n  }\n\n  formatCount() {\n    const {\n      value\n    } = this.state;\n    return value === 0 ? \"Zero\" : value;\n  }\n\n  renderTags() {\n    if (this.state.tags.length === 0) return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"There are no tags!\");\n    return React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, this.state.tags.map(tag => React.createElement(\"li\", {\n      key: tag,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, tag)));\n  }\n\n}\n\nexport default Counter;","map":{"version":3,"sources":["/Users/kevinli/Desktop/reactut2/src/components/counter.jsx"],"names":["React","Component","Counter","state","value","props","tags","styles","fontSize","fontWeight","handleIncrement","product","setState","render","console","log","length","getBadgeClasses","formatCount","classes","renderTags","map","tag"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,MAAMC,OAAN,SAAsBD,SAAtB,CAAgC;AAAA;AAAA;AAAA,SAC9BE,KAD8B,GACtB;AACNC,MAAAA,KAAK,EAAE,KAAKC,KAAL,CAAWD,KADZ;AACmB;AACzB;AACA;AACAE,MAAAA,IAAI,EAAE,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,CAJA,CAKN;;AALM,KADsB;AAAA,SAS9BC,MAT8B,GASrB;AACPC,MAAAA,QAAQ,EAAE,EADH;AAEPC,MAAAA,UAAU,EAAE;AAFL,KATqB;;AAAA,SA8C9BC,eA9C8B,GA8CZC,OAAO,IAAI;AAC3B;AACA;AACA;AACA,WAAKC,QAAL,CAAc;AAAER,QAAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC,KAAX,GAAmB;AAA5B,OAAd;AACD,KAnD6B;AAAA;;AAc9B;AAEA;AACAS,EAAAA,MAAM,GAAG;AACPC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKV,KAAjB;AAEA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGG,KAAKF,KAAL,CAAWG,IAAX,CAAgBU,MAAhB,KAA2B,CAA3B,IAAgC,yBAHnC,EAIE;AAAM,MAAA,SAAS,EAAE,KAAKC,eAAL,EAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA0C,KAAKC,WAAL,EAA1C,CAJF,EAKE;AACE;AACA,MAAA,OAAO,EAAE,MAAM,KAAKR,eAAL,EAFjB,CAEyC;AACvC;AAHF;AAIE,MAAA,SAAS,EAAC,0BAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBALF,EAaE;AAAQ,MAAA,SAAS,EAAC,2BAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAbF,CADF;AAkBD,GAtC6B,CAwC9B;AACA;AACA;AACA;AACA;;;AASAO,EAAAA,eAAe,GAAG;AAChB,QAAIE,OAAO,GAAG,kBAAd,CADgB,CACkB;;AAClCA,IAAAA,OAAO,IAAI,KAAKhB,KAAL,CAAWC,KAAX,KAAqB,CAArB,GAAyB,SAAzB,GAAqC,SAAhD;AACA,WAAOe,OAAP;AACD;;AAEDD,EAAAA,WAAW,GAAG;AACZ,UAAM;AAAEd,MAAAA;AAAF,QAAY,KAAKD,KAAvB;AACA,WAAOC,KAAK,KAAK,CAAV,GAAc,MAAd,GAAuBA,KAA9B;AACD;;AAEDgB,EAAAA,UAAU,GAAG;AACX,QAAI,KAAKjB,KAAL,CAAWG,IAAX,CAAgBU,MAAhB,KAA2B,CAA/B,EAAkC,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAP;AAClC,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKb,KAAL,CAAWG,IAAX,CAAgBe,GAAhB,CAAoBC,GAAG,IACtB;AAAI,MAAA,GAAG,EAAEA,GAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAeA,GAAf,CADD,CADH,CADF;AAOD;;AAzE6B;;AA4EhC,eAAepB,OAAf","sourcesContent":["import React, { Component } from \"react\";\n\nclass Counter extends Component {\n  state = {\n    value: this.props.value, //this works because we have defined counter and\n    //its values (props), int he counters.jsx\n    //count2: 0,\n    tags: [\"tag1\", \"tag2\", \"tag3\"]\n    // imageUrl: \"https://picsum.photos/200\"\n  };\n\n  styles = {\n    fontSize: 50,\n    fontWeight: \"bold\"\n  };\n\n  //this is called when an object counter is created\n\n  // {this.state.tags.length === 0 && \"Please create a new tag\"}, in js, boolean and string gives second operand if it is not empty, etc how many operand you want\n  render() {\n    console.log(this.props);\n\n    return (\n      <div>\n        {/*{this.props.children}*/}\n        {/* doing this allows for children element of <Counter/> to be rendered*/}\n        {this.state.tags.length === 0 && \"Please create a new tag\"}\n        <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\n        <button\n          //here, handleIncrement is a function reference, not a function()\n          onClick={() => this.handleIncrement()} //see how this is not a \"method per say\", since its an arrow function\n          //doesnt not allow me to pass product atm\n          className=\"btn btn-secondary btn-sm\"\n        >\n          Increment\n        </button>\n        <button className=\"btn btn-danger btn-sm m-2\">Delete</button>\n        {/*{this.renderTags()}*/}\n      </div>\n    );\n  }\n\n  //can use this to bind, or just use an arrow function instead\n  //constructor() {\n  //  super();\n  //  this.handleIncrement = this.handleIncrement.bind(this);\n  //}\n\n  handleIncrement = product => {\n    //this.props.value =0; this does not work because props is read only\n    //this.state.count += 1; THIS DOESN'T WORK IN REACT\n    //must use method we inherit from component\n    this.setState({ value: this.state.value + 1 });\n  };\n\n  getBadgeClasses() {\n    let classes = \"badge m-2 badge-\"; //notice how here we're not using const, coz we want to mod it\n    classes += this.state.value === 0 ? \"warning\" : \"primary\";\n    return classes;\n  }\n\n  formatCount() {\n    const { value } = this.state;\n    return value === 0 ? \"Zero\" : value;\n  }\n\n  renderTags() {\n    if (this.state.tags.length === 0) return <p>There are no tags!</p>;\n    return (\n      <ul>\n        {this.state.tags.map(tag => (\n          <li key={tag}>{tag}</li>\n        ))}\n      </ul>\n    );\n  }\n}\n\nexport default Counter;\n"]},"metadata":{},"sourceType":"module"}