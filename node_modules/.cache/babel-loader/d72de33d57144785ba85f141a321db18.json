{"ast":null,"code":"var _jsxFileName = \"/Users/kevinli/Desktop/itemcounter/src/components/counter.jsx\";\nimport React, { Component } from \"react\"; //const listOf = [{ title: \"stuff\" }, { title: \"stuff2\" }];\n\nclass Counter extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      id1: \"Protein\",\n      id2: \"Carbs\",\n      id3: \"Fat\",\n      id4: \"Etc\"\n    };\n    this.aList = [{\n      title: \"stuff\"\n    }, {\n      title: \"stuff2\"\n    }];\n    this.styles = {\n      fontSize: 50,\n      fontWeight: \"bold\"\n    };\n  }\n\n  //this is called when an object counter is created\n  // {this.state.tags.length === 0 && \"Please create a new tag\"}, in js, boolean and string gives second operand if it is not empty, etc how many operand you want\n  render() {\n    console.log(this.props);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: this.getBadgeClasses(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, this.formatCount()), React.createElement(\"button\", {\n      //here, handleIncrement is a function reference, not a function()\n      onClick: () => this.props.onIncrement(this.props.counter) //see how this is not a \"method per say\", since its an arrow function\n      //doesnt not allow me to pass product atm\n      ,\n      className: \"btn btn-secondary btn-sm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, \"Increment\"), React.createElement(\"button\", {\n      //modifying the array should be done in the component its (state) in\n      onClick: () => this.props.onDelete(this.props.counter.id) //to delete counter, we need to delete it in array of counters in counters.jsx\n      //notice how props.onDelete is a props that we made in counters\n      ,\n      className: \"btn btn-danger btn-sm m-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \"Delete\"), React.createElement(\"button\", {\n      onClick: () => this.props.onDecrement(this.props.counter),\n      className: \"btn btn-secondary btn-sm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }));\n  } //can use this to bind, or just use an arrow function instead\n  //constructor() {\n  //  super();\n  //  this.handleIncrement = this.handleIncrement.bind(this);\n  //}\n\n\n  getBadgeClasses() {\n    let classes = \"badge m-2 badge-\"; //notice how here we're not using const, coz we want to mod it\n\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\n    return classes;\n  }\n\n  formatCount() {\n    const {\n      value\n    } = this.props.counter;\n    return value === 0 ? \"Zero\" : value;\n  } // renderTags() {\n  //   if (this.state.tags.length === 0) return <p>There are no tags!</p>;\n  //   return (\n  //     <ul>\n  //       {this.state.tags.map(tag => (\n  //         <li key={tag}>{tag}</li>\n  //       ))}\n  //     </ul>\n  //   );\n  // }\n\n\n}\n\nexport default Counter;","map":{"version":3,"sources":["/Users/kevinli/Desktop/itemcounter/src/components/counter.jsx"],"names":["React","Component","Counter","state","id1","id2","id3","id4","aList","title","styles","fontSize","fontWeight","render","console","log","props","getBadgeClasses","formatCount","onIncrement","counter","onDelete","id","onDecrement","classes","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CAEA;;AAEA,MAAMC,OAAN,SAAsBD,SAAtB,CAAgC;AAAA;AAAA;AAAA,SAC9BE,KAD8B,GACtB;AACNC,MAAAA,GAAG,EAAE,SADC;AAENC,MAAAA,GAAG,EAAE,OAFC;AAGNC,MAAAA,GAAG,EAAE,KAHC;AAINC,MAAAA,GAAG,EAAE;AAJC,KADsB;AAAA,SAQ9BC,KAR8B,GAQtB,CAAC;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAAD,EAAqB;AAAEA,MAAAA,KAAK,EAAE;AAAT,KAArB,CARsB;AAAA,SAU9BC,MAV8B,GAUrB;AACPC,MAAAA,QAAQ,EAAE,EADH;AAEPC,MAAAA,UAAU,EAAE;AAFL,KAVqB;AAAA;;AAe9B;AAEA;AACAC,EAAAA,MAAM,GAAG;AACPC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAjB;AAEA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGE;AAAM,MAAA,SAAS,EAAE,KAAKC,eAAL,EAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA0C,KAAKC,WAAL,EAA1C,CAHF,EAIE;AACE;AACA,MAAA,OAAO,EAAE,MAAM,KAAKF,KAAL,CAAWG,WAAX,CAAuB,KAAKH,KAAL,CAAWI,OAAlC,CAFjB,CAE6D;AAC3D;AAHF;AAIE,MAAA,SAAS,EAAC,0BAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAJF,EAYE;AACE;AACA,MAAA,OAAO,EAAE,MAAM,KAAKJ,KAAL,CAAWK,QAAX,CAAoB,KAAKL,KAAL,CAAWI,OAAX,CAAmBE,EAAvC,CAFjB,CAE6D;AAC3D;AAHF;AAIE,MAAA,SAAS,EAAC,2BAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAZF,EAoBE;AACE,MAAA,OAAO,EAAE,MAAM,KAAKN,KAAL,CAAWO,WAAX,CAAuB,KAAKP,KAAL,CAAWI,OAAlC,CADjB;AAEE,MAAA,SAAS,EAAC,0BAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApBF,CADF;AA4BD,GAjD6B,CAmD9B;AACA;AACA;AACA;AACA;;;AAEAH,EAAAA,eAAe,GAAG;AAChB,QAAIO,OAAO,GAAG,kBAAd,CADgB,CACkB;;AAClCA,IAAAA,OAAO,IAAI,KAAKR,KAAL,CAAWI,OAAX,CAAmBK,KAAnB,KAA6B,CAA7B,GAAiC,SAAjC,GAA6C,SAAxD;AACA,WAAOD,OAAP;AACD;;AAEDN,EAAAA,WAAW,GAAG;AACZ,UAAM;AAAEO,MAAAA;AAAF,QAAY,KAAKT,KAAL,CAAWI,OAA7B;AACA,WAAOK,KAAK,KAAK,CAAV,GAAc,MAAd,GAAuBA,KAA9B;AACD,GAlE6B,CAoE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA7E8B;;AAgFhC,eAAevB,OAAf","sourcesContent":["import React, { Component } from \"react\";\n\n//const listOf = [{ title: \"stuff\" }, { title: \"stuff2\" }];\n\nclass Counter extends Component {\n  state = {\n    id1: \"Protein\",\n    id2: \"Carbs\",\n    id3: \"Fat\",\n    id4: \"Etc\"\n  };\n\n  aList = [{ title: \"stuff\" }, { title: \"stuff2\" }];\n\n  styles = {\n    fontSize: 50,\n    fontWeight: \"bold\"\n  };\n\n  //this is called when an object counter is created\n\n  // {this.state.tags.length === 0 && \"Please create a new tag\"}, in js, boolean and string gives second operand if it is not empty, etc how many operand you want\n  render() {\n    console.log(this.props);\n\n    return (\n      <div>\n        {/*{this.props.children}*/}\n        {/* doing this allows for children element of <Counter/> to be rendered*/}\n        <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\n        <button\n          //here, handleIncrement is a function reference, not a function()\n          onClick={() => this.props.onIncrement(this.props.counter)} //see how this is not a \"method per say\", since its an arrow function\n          //doesnt not allow me to pass product atm\n          className=\"btn btn-secondary btn-sm\"\n        >\n          Increment\n        </button>\n        <button\n          //modifying the array should be done in the component its (state) in\n          onClick={() => this.props.onDelete(this.props.counter.id)} //to delete counter, we need to delete it in array of counters in counters.jsx\n          //notice how props.onDelete is a props that we made in counters\n          className=\"btn btn-danger btn-sm m-2\"\n        >\n          Delete\n        </button>\n        <button\n          onClick={() => this.props.onDecrement(this.props.counter)}\n          className=\"btn btn-secondary btn-sm\"\n        ></button>\n        {/*{this.renderTags()}*/}\n      </div>\n    );\n  }\n\n  //can use this to bind, or just use an arrow function instead\n  //constructor() {\n  //  super();\n  //  this.handleIncrement = this.handleIncrement.bind(this);\n  //}\n\n  getBadgeClasses() {\n    let classes = \"badge m-2 badge-\"; //notice how here we're not using const, coz we want to mod it\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\n    return classes;\n  }\n\n  formatCount() {\n    const { value } = this.props.counter;\n    return value === 0 ? \"Zero\" : value;\n  }\n\n  // renderTags() {\n  //   if (this.state.tags.length === 0) return <p>There are no tags!</p>;\n  //   return (\n  //     <ul>\n  //       {this.state.tags.map(tag => (\n  //         <li key={tag}>{tag}</li>\n  //       ))}\n  //     </ul>\n  //   );\n  // }\n}\n\nexport default Counter;\n"]},"metadata":{},"sourceType":"module"}