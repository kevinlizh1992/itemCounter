{"ast":null,"code":"var _jsxFileName = \"/Users/kevinli/Desktop/reactut2/src/components/counter.jsx\";\nimport React, { Component } from \"react\";\n\nclass Counter extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      count: 0,\n      count2: 0,\n      tags: [\"tag1\", \"tag2\", \"tag3\"] // imageUrl: \"https://picsum.photos/200\"\n\n    };\n    this.styles = {\n      fontSize: 50,\n      fontWeight: \"bold\"\n    };\n\n    this.handleIncrement = product => {\n      console.log(product); //this.state.count += 1; THIS DOESN'T WORK IN REACT\n      //must use method we inherit from component\n\n      this.setState({\n        count: this.state.count + 1\n      });\n    };\n\n    this.handleIncrement2 = () => {\n      //this.state.count += 1; THIS DOESN'T WORK IN REACT\n      //must use method we inherit from component\n      this.setState({\n        count2: this.state.count2 + 1\n      });\n    };\n  }\n\n  //this is called when an object counter is created\n  // {this.state.tags.length === 0 && \"Please create a new tag\"}, in js, boolean and string gives second operand if it is not empty, etc how many operand you want\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, this.state.tags.length === 0 && \"Please create a new tag\", React.createElement(\"span\", {\n      className: this.getBadgeClasses(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, this.formatCount()), React.createElement(\"button\", {\n      //here, handleIncrement is a function reference, not a function()\n      onClick: () => this.handleIncrement(product) //see how this is not a \"method per say\", since its an arrow function\n      //doesnt not allow me to pass product atm\n      ,\n      className: \"btn btn-secondary btn-sm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, \"Increment\"), React.createElement(\"span\", {\n      className: this.getBadgeClasses2(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, this.formatCount2()), React.createElement(\"button\", {\n      onClick: this.handleIncrement2 //see how this is not a \"method per say\", since its an arrow function\n      ,\n      className: \"btn btn-secondary btn-sm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, \"Increment\"), this.renderTags());\n  } //can use this to bind, or just use an arrow function instead\n  //constructor() {\n  //  super();\n  //  this.handleIncrement = this.handleIncrement.bind(this);\n  //}\n\n\n  getBadgeClasses() {\n    let classes = \"badge m-2 badge-\"; //notice how here we're not using const, coz we want to mod it\n\n    classes += this.state.count === 0 ? \"warning\" : \"primary\";\n    return classes;\n  }\n\n  getBadgeClasses2() {\n    let classes = \"badge m-2 badge-\"; //notice how here we're not using const, coz we want to mod it\n\n    classes += this.state.count2 === 0 ? \"warning\" : \"primary\";\n    return classes;\n  }\n\n  formatCount() {\n    const {\n      count\n    } = this.state;\n    return count === 0 ? \"Zero\" : count;\n  }\n\n  formatCount2() {\n    const {\n      count2\n    } = this.state;\n    return count2 === 0 ? \"Zero\" : count2;\n  }\n\n  renderTags() {\n    if (this.state.tags.length === 0) return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"There are no tags!\");\n    return React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, this.state.tags.map(tag => React.createElement(\"li\", {\n      key: tag,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, tag)));\n  }\n\n}\n\nexport default Counter;","map":{"version":3,"sources":["/Users/kevinli/Desktop/reactut2/src/components/counter.jsx"],"names":["React","Component","Counter","state","count","count2","tags","styles","fontSize","fontWeight","handleIncrement","product","console","log","setState","handleIncrement2","render","length","getBadgeClasses","formatCount","getBadgeClasses2","formatCount2","renderTags","classes","map","tag"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nclass Counter extends Component {\n  state = {\n    count: 0,\n    count2: 0,\n    tags: [\"tag1\", \"tag2\", \"tag3\"]\n    // imageUrl: \"https://picsum.photos/200\"\n  };\n\n  styles = {\n    fontSize: 50,\n    fontWeight: \"bold\"\n  };\n\n  //this is called when an object counter is created\n\n  // {this.state.tags.length === 0 && \"Please create a new tag\"}, in js, boolean and string gives second operand if it is not empty, etc how many operand you want\n  render() {\n    return (\n      <React.Fragment>\n        {this.state.tags.length === 0 && \"Please create a new tag\"}\n        <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\n        <button\n          //here, handleIncrement is a function reference, not a function()\n          onClick={() => this.handleIncrement(product)} //see how this is not a \"method per say\", since its an arrow function\n          //doesnt not allow me to pass product atm\n          className=\"btn btn-secondary btn-sm\"\n        >\n          Increment\n        </button>\n\n        <span className={this.getBadgeClasses2()}>{this.formatCount2()}</span>\n        <button\n          onClick={this.handleIncrement2} //see how this is not a \"method per say\", since its an arrow function\n          className=\"btn btn-secondary btn-sm\"\n        >\n          Increment\n        </button>\n\n        {this.renderTags()}\n      </React.Fragment>\n    );\n  }\n\n  //can use this to bind, or just use an arrow function instead\n  //constructor() {\n  //  super();\n  //  this.handleIncrement = this.handleIncrement.bind(this);\n  //}\n\n  handleIncrement = product => {\n    console.log(product);\n    //this.state.count += 1; THIS DOESN'T WORK IN REACT\n    //must use method we inherit from component\n    this.setState({ count: this.state.count + 1 });\n  };\n\n  handleIncrement2 = () => {\n    //this.state.count += 1; THIS DOESN'T WORK IN REACT\n    //must use method we inherit from component\n    this.setState({ count2: this.state.count2 + 1 });\n  };\n\n  getBadgeClasses() {\n    let classes = \"badge m-2 badge-\"; //notice how here we're not using const, coz we want to mod it\n    classes += this.state.count === 0 ? \"warning\" : \"primary\";\n    return classes;\n  }\n\n  getBadgeClasses2() {\n    let classes = \"badge m-2 badge-\"; //notice how here we're not using const, coz we want to mod it\n    classes += this.state.count2 === 0 ? \"warning\" : \"primary\";\n    return classes;\n  }\n\n  formatCount() {\n    const { count } = this.state;\n    return count === 0 ? \"Zero\" : count;\n  }\n\n  formatCount2() {\n    const { count2 } = this.state;\n    return count2 === 0 ? \"Zero\" : count2;\n  }\n\n  renderTags() {\n    if (this.state.tags.length === 0) return <p>There are no tags!</p>;\n    return (\n      <ul>\n        {this.state.tags.map(tag => (\n          <li key={tag}>{tag}</li>\n        ))}\n      </ul>\n    );\n  }\n}\n\nexport default Counter;\n"]},"metadata":{},"sourceType":"module"}